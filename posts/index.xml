<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on 德瑞克的實驗室</title>
    <link>https://chzlab.net/posts/</link>
    <description>Recent content in Posts on 德瑞克的實驗室</description>
    <image>
      <url>https://chzlab.net/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://chzlab.net/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 01 Mar 2022 15:12:29 +0800</lastBuildDate><atom:link href="https://chzlab.net/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Gin http request test 筆記</title>
      <link>https://chzlab.net/2022/03/01/gin-http-request-test-%E7%AD%86%E8%A8%98/</link>
      <pubDate>Tue, 01 Mar 2022 15:12:29 +0800</pubDate>
      
      <guid>https://chzlab.net/2022/03/01/gin-http-request-test-%E7%AD%86%E8%A8%98/</guid>
      <description>gin 思路 參考相關文件、 repo ，在設計上的層級類似下列這樣
server =&amp;gt; service (interface) =&amp;gt; repository (interface)
將 interface 開出來，實作完之後一路使用注入的逐層掛進去。
開出 interface 除了規範 method 之外，還能在後續針對測試時， 方便撰寫 mock 注入。
server | - service | - repository 略 測試 以使用 gin 為例
get const wantGetMsg = &amp;#34;mock hello eric&amp;#34; func TestHelloByName(t *testing.T) { gin.SetMode(gin.TestMode) r := gin.Default() // di mock service 	service := MockHelloService{} server := NewHelloServer(service) // mount router 	r.GET(&amp;#34;/hello/:name&amp;#34;, server.SayHello) rq := httptest.NewRequest(http.MethodGet, &amp;#34;/hello/eric&amp;#34;, nil) rw := httptest.</description>
    </item>
    
    <item>
      <title>Gorm Sqlite 測試相關問題</title>
      <link>https://chzlab.net/2022/02/10/gorm-sqlite-%E6%B8%AC%E8%A9%A6%E7%9B%B8%E9%97%9C%E5%95%8F%E9%A1%8C/</link>
      <pubDate>Thu, 10 Feb 2022 22:28:47 +0800</pubDate>
      
      <guid>https://chzlab.net/2022/02/10/gorm-sqlite-%E6%B8%AC%E8%A9%A6%E7%9B%B8%E9%97%9C%E5%95%8F%E9%A1%8C/</guid>
      <description>failed to initialize database 原因 golang + gorm 搭配 sqlite 練習測試的時候發現， 把 db 用 go-sqlmock 的替換掉後，在跑測試時會噴
failed to initialize database, got error all expectations were already fulfilled, call to Query &#39;select sqlite_version()&#39; mysql 解法 如果 db 是用 mysql 的話，只要這樣設定
gDB, err := gorm.Open(mysql.New(mysql.Config{ Conn: DB, SkipInitializeWithVersion: true, }), &amp;amp;gorm.Config{}) 細節可以參考 source code
sqlite 暫解 不過在 sqlite 上面看 code 是沒有開這個參數 source code
因為只是練習，所以我這邊先直接寫一個新的 MockDialector 把它掛進來， 然後把 sqlite.Dialector() 複製過來後把 version 不需要的地方拿掉。
實際上應該把相關的 code 都看過，確認是不是有必要開這個參數出來，然後發個 issue ， 如果沒問題 pr 做出來之類的？</description>
    </item>
    
    <item>
      <title>Github 未來將支援顯示 Mermaid 圖表</title>
      <link>https://chzlab.net/2022/02/07/github-%E6%9C%AA%E4%BE%86%E5%B0%87%E6%94%AF%E6%8F%B4%E9%A1%AF%E7%A4%BA-mermaid-%E5%9C%96%E8%A1%A8/</link>
      <pubDate>Mon, 07 Feb 2022 13:15:48 +0800</pubDate>
      
      <guid>https://chzlab.net/2022/02/07/github-%E6%9C%AA%E4%BE%86%E5%B0%87%E6%94%AF%E6%8F%B4%E9%A1%AF%E7%A4%BA-mermaid-%E5%9C%96%E8%A1%A8/</guid>
      <description>source: https://github.com/github/roadmap/issues/372
之前在 hackmd 、 gitlab 印象都可以直接畫 flowchart，
剛剛在 github 上面畫，發現沒反應，
查了一下在 github roadmap 有記錄，看樣子未來會支援了，</description>
    </item>
    
    <item>
      <title>資料密集型應用系統設計 (1)</title>
      <link>https://chzlab.net/2022/02/05/%E8%B3%87%E6%96%99%E5%AF%86%E9%9B%86%E5%9E%8B%E6%87%89%E7%94%A8%E7%B3%BB%E7%B5%B1%E8%A8%AD%E8%A8%88-1/</link>
      <pubDate>Sat, 05 Feb 2022 12:28:10 +0800</pubDate>
      
      <guid>https://chzlab.net/2022/02/05/%E8%B3%87%E6%96%99%E5%AF%86%E9%9B%86%E5%9E%8B%E6%87%89%E7%94%A8%E7%B3%BB%E7%B5%B1%E8%A8%AD%E8%A8%88-1/</guid>
      <description>第一章 可靠性，可擴展性，可維護性的應用系統 背景 目前多數的系統，屬於資料密集型 (data-intensive)，著重於資料的量級、複雜度、快速變化等狀況延伸的問題。 主要組成為：資料庫、 cache 、 search index 、 steam processing 、 batch processing。 會根據情境來設計出相對合適的架構。
資料系統思維 書中將 Redis 、 Apache Kafka 等非 DB 也歸類在資料系統下的原因為，這些也根據情境提供了類似的功能使用， 不再是以傳統的角度，去分類這些服務。會透過組合這些服務，設計出系統。
三個思路  可靠 p.6 可擴展 p.10  twitter tweets 優化  user 觀看 feed 時，會先將關注的人的 feed 拉出合併，但在後續量級提昇造成查詢負擔。 user 增加一個 cache feed ，當有新 tweet 時，放入到對應的 cache feed。 這邊最後的方式，根據 user 的 關注的人，來做兩種方式混合使用。   Amazon SLO 用 P99.9   可維護 p.18  </description>
    </item>
    
    <item>
      <title>[2022-沒工作系列-04] Tampermonkey 筆記</title>
      <link>https://chzlab.net/2022/02/04/2022-%E6%B2%92%E5%B7%A5%E4%BD%9C%E7%B3%BB%E5%88%97-04-tampermonkey-%E7%AD%86%E8%A8%98/</link>
      <pubDate>Fri, 04 Feb 2022 19:24:53 +0800</pubDate>
      
      <guid>https://chzlab.net/2022/02/04/2022-%E6%B2%92%E5%B7%A5%E4%BD%9C%E7%B3%BB%E5%88%97-04-tampermonkey-%E7%AD%86%E8%A8%98/</guid>
      <description>需求 之前寫 Tampermonkey 的腳本，有些部分，一直沒時間優化，分別為：
 自動複製檔名到 clipboard 下載檔案時自動命名 跨 script 取用變數  現在有空檔，來研究一下。
自動複製檔名到 clipboard 忘記之前踩到什麼問題，這次直接用 Clipboard API 就達到效果了。 writeText 可以直接帶 string 。
navigator.clipboard.writeText(GM_getValue(&amp;#39;xxxx&amp;#39;)) .then(() =&amp;gt; { console.log(&amp;#34;Copied to clipboard successfully!&amp;#34;); }) // 略 參考文件  https://w3c.github.io/clipboard-apis/#dom-clipboard-write https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API  下載檔案時自動命名 如果是針對 a 元素，可以直接增加 download attribute，使他調整下載的檔名， 但是如果 server 有特別回 content-disposition header 會以 server 為準，所以就不會有作用。
還有一個作法是利用 axios get 檔案後，重新塞到新連結後，再來下載就不會前面提到的問題， 不過因為我要操作的檔案不小，不適合這種作法。
所以現階段現自動設定到 clipboard ，手動貼上改檔名。
參考文件  Javascript rename file on download Javascript: set filename to be downloaded  跨 script 取用變數 用法很簡單，在 Tampermonkey 腳本增加下列兩行</description>
    </item>
    
    <item>
      <title>[2022-沒工作系列-03] Hugo PaperMod 主題安裝 Disqus</title>
      <link>https://chzlab.net/2022/01/30/2022-%E6%B2%92%E5%B7%A5%E4%BD%9C%E7%B3%BB%E5%88%97-03-hugo-papermod-%E4%B8%BB%E9%A1%8C%E5%AE%89%E8%A3%9D-disqus/</link>
      <pubDate>Sun, 30 Jan 2022 23:23:41 +0800</pubDate>
      
      <guid>https://chzlab.net/2022/01/30/2022-%E6%B2%92%E5%B7%A5%E4%BD%9C%E7%B3%BB%E5%88%97-03-hugo-papermod-%E4%B8%BB%E9%A1%8C%E5%AE%89%E8%A3%9D-disqus/</guid>
      <description>註冊 Disqus  進入 Disqus 註冊，基本上按步驟做，列出幾個比較重要的。 Select plan 選擇 Basic 方案 Select Platform 選擇手動安裝 會出現兩份要放入的 html ，用途應該分別為 comment 以及 count 後續把設定完成。  在 Hugo PaperMod 主題設定 因每個主題針對 comment 的設定可能不一樣，這以我用的 PaperMod 為例
 調整專案根目錄下的 config.yml  新增 disqus 設定， shortname 按照在 disqus 的設定 在 params 下，調整 comments 為 true    // 這邊 disqus: enable: true shortname: chzlab-net count: true // 到這邊 params: title: Deric&#39;s BLOG // 略 comments: true // 多這 在專案根目錄下建立資料夾 layouts 在 layouts 資料夾下 建立 partials 資料夾 從專案根目錄下的 /themes/PaperMod/layouts/partials/comments.</description>
    </item>
    
    <item>
      <title>[2022-沒工作系列-02] Golang Command 入門</title>
      <link>https://chzlab.net/2022/01/30/2022-%E6%B2%92%E5%B7%A5%E4%BD%9C%E7%B3%BB%E5%88%97-02-golang-command-%E5%85%A5%E9%96%80/</link>
      <pubDate>Sun, 30 Jan 2022 21:10:37 +0800</pubDate>
      
      <guid>https://chzlab.net/2022/01/30/2022-%E6%B2%92%E5%B7%A5%E4%BD%9C%E7%B3%BB%E5%88%97-02-golang-command-%E5%85%A5%E9%96%80/</guid>
      <description>基本用法 目前練習先使用 flag package
func init() { flag.StringVar(&amp;amp;sourceFolder, &amp;#34;s&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;source folder path [required]&amp;#34;) // 設定要吃的參數，使用有帶 Var func 會把值存到 第一個參數中  // output -s [path]  flag.Usage = usage // 執行沒帶參數 或帶 --help / -h 會顯示的提示訊息 } func usage() { fmt.Fprintln(os.Stderr, &amp;#34;Usage: parse [options]&amp;#34;) flag.PrintDefaults() // 透過 flag 設定的參數說明都印出來 } 參考文件  Can command line flags in Go be set to mandatory? Go by Example: Command-Line Subcommands Golang 官方文件 flag 【Golang】如何讀取 command-line argument/flag？必知的幾種用法！  其他套件  go-flags cobra  </description>
    </item>
    
    <item>
      <title>[2022-沒工作系列-01] Migrate Hexo to Hugo</title>
      <link>https://chzlab.net/2022/01/29/2022-%E6%B2%92%E5%B7%A5%E4%BD%9C%E7%B3%BB%E5%88%97-01-migrate-hexo-to-hugo/</link>
      <pubDate>Sat, 29 Jan 2022 17:23:58 +0800</pubDate>
      
      <guid>https://chzlab.net/2022/01/29/2022-%E6%B2%92%E5%B7%A5%E4%BD%9C%E7%B3%BB%E5%88%97-01-migrate-hexo-to-hugo/</guid>
      <description>原因 原本是用 Hexo ， 因會在 windows、 linux 下切換開發，有時 node 在 windows terminal 會有些詭異問題發生， 決定換成 golang 的 Hugo ，省的麻煩。
windows 安裝 Hugo Hugo 官方文件
可以使用在 win 上面的套件管理器 Chocolatey 或 Scoop ，差異似乎是在權限以及相依性，有點不太一樣，沒有細看。 有興趣可以參考
Scoop or Chocolatey? Which Windows 10 package manager should you use?
後來我選了 Scoop ，剛裝完可以用，當我把 terminal 關掉重開就又壞了&amp;hellip;&amp;hellip;
為了省事直接使用第三個方案，從 Hugo Github 直接裝執行檔來用，安裝位置就看個人習慣， 裝完記得在 path 裡面把路徑設定進去，因為在 win 的環境下習慣用 git bash ，所以我是這樣設定。
# .bashrc PATH=$PATH:/c/work/tools/ 如果要用 win 內建的話，就直接在環境變數 path 裡面加。
最後 terminal 下輸入 hugo ，正常執行。</description>
    </item>
    
    <item>
      <title>Hexo 部屬至　GitHub Page</title>
      <link>https://chzlab.net/2021/03/13/hexo-%E9%83%A8%E5%B1%AC%E8%87%B3-github-page/</link>
      <pubDate>Sat, 13 Mar 2021 21:23:07 +0000</pubDate>
      
      <guid>https://chzlab.net/2021/03/13/hexo-%E9%83%A8%E5%B1%AC%E8%87%B3-github-page/</guid>
      <description>原本是架在 GCP 上，想說是個靜態頁面，乾脆就搬到 GitHub Page 上，做一下相關記錄。
步驟   開　repo 命名為 {username}.github.io，如果已經有了，請把那個 repo 改名。
  將專案下的 package.json ， 增加 scripts 區塊。
  { &amp;quot;scripts&amp;quot;: { &amp;quot;build&amp;quot;: &amp;quot;hexo generate&amp;quot; }, &amp;quot;hexo&amp;quot;: { &amp;quot;version&amp;quot;: &amp;quot;5.0.0&amp;quot; }, &amp;quot;dependencies&amp;quot;: { &amp;quot;hexo&amp;quot;: &amp;quot;^5.0.0&amp;quot;, ... } } 開一個 source branch ，並 push 上去。   public 資料夾記得要在 .gitignore 增加
 git push origin source 建立 .github/workflows/pages.yml  .github/workflows/pages.yml name: Pages on: push: branches: - source # default branch jobs: pages: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - name: Use Node.</description>
    </item>
    
    <item>
      <title>python flask 體驗</title>
      <link>https://chzlab.net/2021/01/22/python-flask-%E9%AB%94%E9%A9%97/</link>
      <pubDate>Fri, 22 Jan 2021 14:00:00 +0000</pubDate>
      
      <guid>https://chzlab.net/2021/01/22/python-flask-%E9%AB%94%E9%A9%97/</guid>
      <description>原因 因為最近需要使用 python 作為 api 開發的環境，與團隊成員討論後，決定使用 flask web framework 框架，第一次使用，記錄相關的筆記。
套件管理 pip pip 基本上可以當做 php 的 composer， 相關的紀錄會在 requirements.txt 。
指令 如果有更動過套件，記得在專案下 pip freeze &amp;gt; requirements.txt，把目前的套件記錄匯出來，避免套件不一致。
 這邊他也會把相依的套件記錄也一併輸出。
 安裝 pip install flask // 指定版號 pip install -v flask==1.0 // 透過指定檔案安裝套件，通常都使用 requirements.txt 作為檔名 pip install -r [檔案名稱] pip install -r requirements.txt 建立套件清單 pip freeze &amp;gt; [檔案名稱] pip freeze &amp;gt; requirements.txt flask 啟用 debug mode 設定 env FLASK_ENV 為 developmen，開啟同時也會啟用 hot reload，這樣變動檔案馬上就會更新。</description>
    </item>
    
    <item>
      <title>一學就會的拍片課摘錄筆記</title>
      <link>https://chzlab.net/2020/03/24/%E4%B8%80%E5%AD%B8%E5%B0%B1%E6%9C%83%E7%9A%84%E6%8B%8D%E7%89%87%E8%AA%B2%E6%91%98%E9%8C%84%E7%AD%86%E8%A8%98/</link>
      <pubDate>Tue, 24 Mar 2020 20:51:14 +0000</pubDate>
      
      <guid>https://chzlab.net/2020/03/24/%E4%B8%80%E5%AD%B8%E5%B0%B1%E6%9C%83%E7%9A%84%E6%8B%8D%E7%89%87%E8%AA%B2%E6%91%98%E9%8C%84%E7%AD%86%E8%A8%98/</guid>
      <description>基本上手指南  用鏡頭思考  目標是誰？ 在做什麼？ 有不有趣？   不有趣，停下。找有趣內容拍攝，避免浪費時間處理不可用鏡頭或片段。
     2. 看到眼白再拍攝 &amp;gt; 人的面部表情可作為鏡頭焦點。 3. 鏡頭時間 * 時間建議不要超過 10 秒。 * 短鏡頭讓影片更具衝擊性。 4. 拍攝 * 用腳變焦，自行靠近主體。 * 使用腳架。 * 別用 「數位變焦」。 5. 站穩！別亂動 * 拍攝時不變焦。 * 攝影機當相機。 * 確認畫面 =&amp;gt; 按下開始 =&amp;gt; 拍攝 =&amp;gt; 停止。 * 移動 =&amp;gt; 對準 =&amp;gt; 拍攝 =&amp;gt; 停止，循環。 6. 光源保持在後，保持明亮 &amp;gt; 光線過強，讓陽光斜照，避免過亮。 7. 關閉數位特效 &amp;gt; 保留彈性，加工透過後製。 8. 專注於真正感興趣的內容 * 想要表達的重點。 * 神情、動作、雙方的反應。 * 原因、過程、結果。 9.</description>
    </item>
    
    <item>
      <title>正規表達式-基本概念</title>
      <link>https://chzlab.net/2020/02/28/%E6%AD%A3%E8%A6%8F%E8%A1%A8%E9%81%94%E5%BC%8F-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Fri, 28 Feb 2020 19:09:58 +0000</pubDate>
      
      <guid>https://chzlab.net/2020/02/28/%E6%AD%A3%E8%A6%8F%E8%A1%A8%E9%81%94%E5%BC%8F-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</guid>
      <description>記錄 精通正規式表達式 相關的心得與筆記
   詮釋字元 名稱 匹配內容     . 句點 任何一個字元   [&amp;hellip;] 字元類別(character class) 任何一個列出的字元   [^&amp;hellip;] 反轉字元類別 任何一個沒有列出的字元   ^ 脫字號 行首位置   $ 錢號 行尾位置   ＼ or、或、bar 匹配由它分隔的任一表達式   () 括號 限制 | 範圍   \&amp;lt; word boundary 單字開頭位置 (單詞邊界、metasequences、詮釋序列)   \&amp;gt; word boundary 單字結束位置 (單詞邊界、metasequences、詮釋序列)    特殊情境解釋：
  在 字元類別 狀況，要確認 使用的詮釋字元 在 字元類別 內是否有意義。</description>
    </item>
    
    <item>
      <title>Mac安裝Composer</title>
      <link>https://chzlab.net/2020/02/22/mac%E5%AE%89%E8%A3%9Dcomposer/</link>
      <pubDate>Sat, 22 Feb 2020 23:48:39 +0000</pubDate>
      
      <guid>https://chzlab.net/2020/02/22/mac%E5%AE%89%E8%A3%9Dcomposer/</guid>
      <description>基本前提為環境需要有 PHP ，
後續按照 Composer 安裝教學 步驟做。
php -r &amp;#34;copy(&amp;#39;https://getcomposer.org/installer&amp;#39;, &amp;#39;composer-setup.php&amp;#39;);&amp;#34; php -r &amp;#34;if (hash_file(&amp;#39;sha384&amp;#39;, &amp;#39;composer-setup.php&amp;#39;) === &amp;#39;e0012edf3e80b6978849f5eff0d4b4e4c79ff1609dd1e613307e16318854d24ae64f26d17af3ef0bf7cfb710ca74755a&amp;#39;) { echo &amp;#39;Installer verified&amp;#39;; } else { echo &amp;#39;Installer corrupt&amp;#39;; unlink(&amp;#39;composer-setup.php&amp;#39;); } echo PHP_EOL;&amp;#34; php composer-setup.php php -r &amp;#34;unlink(&amp;#39;composer-setup.php&amp;#39;);&amp;#34; 此時在執行指令的位置，會出現以下檔案
composer.phar 測試執行 composer.phar
composer.phar // 顯示 ______ / ____/___ ____ ___ ____ ____ ________ _____ / / / __ \/ __ `__ \/ __ \/ __ \/ ___/ _ \/ ___/ / /___/ /_/ / / / / / / /_/ / /_/ (__ ) __/ / \____/\____/_/ /_/ /_/ .</description>
    </item>
    
    <item>
      <title>Domain 網址 網域 購買筆記</title>
      <link>https://chzlab.net/2020/02/19/domain-%E7%B6%B2%E5%9D%80-%E7%B6%B2%E5%9F%9F-%E8%B3%BC%E8%B2%B7%E7%AD%86%E8%A8%98/</link>
      <pubDate>Wed, 19 Feb 2020 13:35:02 +0000</pubDate>
      
      <guid>https://chzlab.net/2020/02/19/domain-%E7%B6%B2%E5%9D%80-%E7%B6%B2%E5%9F%9F-%E8%B3%BC%E8%B2%B7%E7%AD%86%E8%A8%98/</guid>
      <description>現在使用 chzlab.com domain 為範例，來做相關比較，
最後選擇 Gandi + Let&amp;rsquo;s Encrypt (免費SSL) 。 因目前 Google Domain 台灣尚未開放購買，未來應該會換去 Google Domain 。
   廠商 價格 WHOIS Privacy SSL     Google Domain $361 免費 連結   Gandi $446 免費 連結   Godaddy $299 額外付費 ($293) 連結   中華電信 $720 未知 連結   name $270 首年免費，後續每年($150) 連結    美金匯率以 2020-02-19 13:35 : 30.16 做計算，上述列皆已轉換成新台幣價格。 </description>
    </item>
    
  </channel>
</rss>
