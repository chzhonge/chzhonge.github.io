<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>gin on 德瑞克的實驗室</title>
    <link>https://chzlab.net/tags/gin/</link>
    <description>Recent content in gin on 德瑞克的實驗室</description>
    <image>
      <url>https://chzlab.net/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://chzlab.net/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 01 Mar 2022 15:12:29 +0800</lastBuildDate><atom:link href="https://chzlab.net/tags/gin/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Gin http request test 筆記</title>
      <link>https://chzlab.net/2022/03/01/gin-http-request-test-%E7%AD%86%E8%A8%98/</link>
      <pubDate>Tue, 01 Mar 2022 15:12:29 +0800</pubDate>
      
      <guid>https://chzlab.net/2022/03/01/gin-http-request-test-%E7%AD%86%E8%A8%98/</guid>
      <description>gin 思路 參考相關文件、 repo ，在設計上的層級類似下列這樣
server =&amp;gt; service (interface) =&amp;gt; repository (interface)
將 interface 開出來，實作完之後一路使用注入的逐層掛進去。
開出 interface 除了規範 method 之外，還能在後續針對測試時， 方便撰寫 mock 注入。
server | - service | - repository 略 測試 以使用 gin 為例
get const wantGetMsg = &amp;#34;mock hello eric&amp;#34; func TestHelloByName(t *testing.T) { gin.SetMode(gin.TestMode) r := gin.Default() // di mock service 	service := MockHelloService{} server := NewHelloServer(service) // mount router 	r.GET(&amp;#34;/hello/:name&amp;#34;, server.SayHello) rq := httptest.NewRequest(http.MethodGet, &amp;#34;/hello/eric&amp;#34;, nil) rw := httptest.</description>
    </item>
    
  </channel>
</rss>
