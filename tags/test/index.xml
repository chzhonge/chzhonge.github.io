<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>test on 德瑞克的實驗室</title>
    <link>https://chzlab.net/tags/test/</link>
    <description>Recent content in test on 德瑞克的實驗室</description>
    <image>
      <url>https://chzlab.net/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://chzlab.net/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 01 Mar 2022 15:12:29 +0800</lastBuildDate><atom:link href="https://chzlab.net/tags/test/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Gin http request test 筆記</title>
      <link>https://chzlab.net/2022/03/01/gin-http-request-test-%E7%AD%86%E8%A8%98/</link>
      <pubDate>Tue, 01 Mar 2022 15:12:29 +0800</pubDate>
      
      <guid>https://chzlab.net/2022/03/01/gin-http-request-test-%E7%AD%86%E8%A8%98/</guid>
      <description>gin 思路 參考相關文件、 repo ，在設計上的層級類似下列這樣
server =&amp;gt; service (interface) =&amp;gt; repository (interface)
將 interface 開出來，實作完之後一路使用注入的逐層掛進去。
開出 interface 除了規範 method 之外，還能在後續針對測試時， 方便撰寫 mock 注入。
server | - service | - repository 略 測試 以使用 gin 為例
get const wantGetMsg = &amp;#34;mock hello eric&amp;#34; func TestHelloByName(t *testing.T) { gin.SetMode(gin.TestMode) r := gin.Default() // di mock service 	service := MockHelloService{} server := NewHelloServer(service) // mount router 	r.GET(&amp;#34;/hello/:name&amp;#34;, server.SayHello) rq := httptest.NewRequest(http.MethodGet, &amp;#34;/hello/eric&amp;#34;, nil) rw := httptest.</description>
    </item>
    
    <item>
      <title>Gorm Sqlite 測試相關問題</title>
      <link>https://chzlab.net/2022/02/10/gorm-sqlite-%E6%B8%AC%E8%A9%A6%E7%9B%B8%E9%97%9C%E5%95%8F%E9%A1%8C/</link>
      <pubDate>Thu, 10 Feb 2022 22:28:47 +0800</pubDate>
      
      <guid>https://chzlab.net/2022/02/10/gorm-sqlite-%E6%B8%AC%E8%A9%A6%E7%9B%B8%E9%97%9C%E5%95%8F%E9%A1%8C/</guid>
      <description>failed to initialize database 原因 golang + gorm 搭配 sqlite 練習測試的時候發現， 把 db 用 go-sqlmock 的替換掉後，在跑測試時會噴
failed to initialize database, got error all expectations were already fulfilled, call to Query &#39;select sqlite_version()&#39; mysql 解法 如果 db 是用 mysql 的話，只要這樣設定
gDB, err := gorm.Open(mysql.New(mysql.Config{ Conn: DB, SkipInitializeWithVersion: true, }), &amp;amp;gorm.Config{}) 細節可以參考 source code
sqlite 暫解 不過在 sqlite 上面看 code 是沒有開這個參數 source code
因為只是練習，所以我這邊先直接寫一個新的 MockDialector 把它掛進來， 然後把 sqlite.Dialector() 複製過來後把 version 不需要的地方拿掉。
實際上應該把相關的 code 都看過，確認是不是有必要開這個參數出來，然後發個 issue ， 如果沒問題 pr 做出來之類的？</description>
    </item>
    
  </channel>
</rss>
