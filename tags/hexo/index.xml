<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>hexo on 德瑞克的實驗室</title>
    <link>https://chzlab.net/tags/hexo/</link>
    <description>Recent content in hexo on 德瑞克的實驗室</description>
    <image>
      <url>https://chzlab.net/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://chzlab.net/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 29 Jan 2022 17:23:58 +0800</lastBuildDate><atom:link href="https://chzlab.net/tags/hexo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[2022-沒工作系列-01] Migrate Hexo to Hugo</title>
      <link>https://chzlab.net/2022/01/29/2022-%E6%B2%92%E5%B7%A5%E4%BD%9C%E7%B3%BB%E5%88%97-01-migrate-hexo-to-hugo/</link>
      <pubDate>Sat, 29 Jan 2022 17:23:58 +0800</pubDate>
      
      <guid>https://chzlab.net/2022/01/29/2022-%E6%B2%92%E5%B7%A5%E4%BD%9C%E7%B3%BB%E5%88%97-01-migrate-hexo-to-hugo/</guid>
      <description>原因 原本是用 Hexo ， 因會在 windows、 linux 下切換開發，有時 node 在 windows terminal 會有些詭異問題發生， 決定換成 golang 的 Hugo ，省的麻煩。
windows 安裝 Hugo Hugo 官方文件
可以使用在 win 上面的套件管理器 Chocolatey 或 Scoop ，差異似乎是在權限以及相依性，有點不太一樣，沒有細看。 有興趣可以參考
Scoop or Chocolatey? Which Windows 10 package manager should you use?
後來我選了 Scoop ，剛裝完可以用，當我把 terminal 關掉重開就又壞了&amp;hellip;&amp;hellip;
為了省事直接使用第三個方案，從 Hugo Github 直接裝執行檔來用，安裝位置就看個人習慣， 裝完記得在 path 裡面把路徑設定進去，因為在 win 的環境下習慣用 git bash ，所以我是這樣設定。
# .bashrc PATH=$PATH:/c/work/tools/ 如果要用 win 內建的話，就直接在環境變數 path 裡面加。
最後 terminal 下輸入 hugo ，正常執行。</description>
    </item>
    
    <item>
      <title>Hexo 部屬至　GitHub Page</title>
      <link>https://chzlab.net/2021/03/13/hexo-%E9%83%A8%E5%B1%AC%E8%87%B3-github-page/</link>
      <pubDate>Sat, 13 Mar 2021 21:23:07 +0000</pubDate>
      
      <guid>https://chzlab.net/2021/03/13/hexo-%E9%83%A8%E5%B1%AC%E8%87%B3-github-page/</guid>
      <description>原本是架在 GCP 上，想說是個靜態頁面，乾脆就搬到 GitHub Page 上，做一下相關記錄。
步驟   開　repo 命名為 {username}.github.io，如果已經有了，請把那個 repo 改名。
  將專案下的 package.json ， 增加 scripts 區塊。
  { &amp;quot;scripts&amp;quot;: { &amp;quot;build&amp;quot;: &amp;quot;hexo generate&amp;quot; }, &amp;quot;hexo&amp;quot;: { &amp;quot;version&amp;quot;: &amp;quot;5.0.0&amp;quot; }, &amp;quot;dependencies&amp;quot;: { &amp;quot;hexo&amp;quot;: &amp;quot;^5.0.0&amp;quot;, ... } } 開一個 source branch ，並 push 上去。   public 資料夾記得要在 .gitignore 增加
 git push origin source 建立 .github/workflows/pages.yml  .github/workflows/pages.yml name: Pages on: push: branches: - source # default branch jobs: pages: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - name: Use Node.</description>
    </item>
    
  </channel>
</rss>
